import paramiko
import socket
import threading

# Server authentication and session logic
class VulnerableServer(paramiko.ServerInterface, threading.Event):
    def __init__(self):
        paramiko.ServerInterface.__init__(self)
        threading.Event.__init__(self)

    def check_auth_password(self, u, p):
        return paramiko.AUTH_FAILED

    def check_channel_request(self, k, c):
        if k == 'session': return paramiko.OPEN_SUCCEEDED
        return paramiko.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED

    def get_allowed_auths(self, u):
        return 'password'

    # Since our server is simple enough, we don't need complex SFTP handling logic.
    # Just approving the request is enough, and subsequent actions are driven by recv().
    def check_channel_subsystem_request(self, channel, name):
        if name == 'sftp':
            return True
        return False


# Main program
if __name__ == "__main__":
    try:
        host_key = paramiko.RSAKey.generate(2048)
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        sock.bind(('', 2222))
        sock.listen(100)
        print("Target: Started and listening on 0.0.0.0:2222")

        client_sock, addr = sock.accept()
        print(f"Target: Accepted connection from {addr}.")

        t = paramiko.Transport(client_sock)
        t.add_server_key(host_key)
        server = VulnerableServer()
        t.start_server(server=server)
        print("Target: Server main event loop has started.")

        chan = t.accept(timeout=10)
        if chan is None:
            raise Exception('Client did not open a session before timeout')

        print(f"Target: Client opened a session (chanid={chan.get_id()}), vulnerability triggered.")

        # --- The final, key fix ---
        # Call chan.recv() to block the main thread and drive the event loop
        # to handle the SFTP handshake and subsequent requests.
        # We don't care what we receive; we just need to be in this state.
        print("Target: Waiting for client SFTP commands...")
        chan.recv(1024)

        print("Target: Received client data or close signal, task complete.")
        chan.close()
        t.close()

    except Exception as e:
        print(f"Target main thread error: {e}")

    print("Target: Exiting normally.")