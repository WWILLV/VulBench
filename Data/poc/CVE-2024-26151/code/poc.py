import subprocess
import sys

malicious_payload = """
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
&lt;title&gt;Important Message&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div class="container"&gt;
  &lt;h1&gt;Important Message&lt;/h1&gt;
  &lt;p&gt;Hello Tom,&lt;/p&gt;

  &lt;p&gt;This is Smartkeyss. I am trying to hack your mail hahaha. Do not click on the link below cos it's a phishing link :&lt;/p&gt;
  &lt;a href="https://example.com/malicious-site" class="cta-button"&gt;View Details&lt;/a&gt;
  &lt;p&gt;If you have any questions, feel free to contact us grin.&lt;/p&gt;
&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
"""

# Remove leading/trailing whitespace
# Define the MJML template with injected payload

mjml_template = """
<mjml>
   <mj-body>    
      <mj-section>      
         <mj-column>        
            <mj-text>                  
               {malicious_payload}           
            </mj-text>       
         </mj-column>     
      </mj-section>   
   </mj-body> 
</mjml> """ 

# Inject the payload into the MJML template 

malicious_mjml_template = mjml_template.format(malicious_payload=malicious_payload) 

# Write the malicious MJML template to a file
with open("malicious_template.mjml", "w") as file:
    file.write(malicious_mjml_template)

# Compile the malicious MJML template into HTML using the MJML CLI 

try:
    subprocess.run(["mjml", "malicious_template.mjml", "-o", "malicious_template.html"], check=True)
    print("Malicious MJML template compiled successfully.")

except subprocess.CalledProcessError as e:
    print(f"Error compiling MJML template: {e}")

with open("malicious_template.html", "r") as file:
    html_content = file.read()
print(html_content)
