# -*- coding: utf-8 -*-

import mechanize
import time
import os
import sys
import subprocess
import socket
import signal

# --- Global Config ---
# Use absolute path to locate server.py, making it location-independent.
SERVER_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)), "server.py")
SERVER_URL = "http://127.0.0.1:8080"
SERVER_PORT = 8080
TIMEOUT_SECONDS = 30  # Timeout for vulnerability verification.


# --- Timeout Handling ---
class TimeoutException(Exception):
    """Custom timeout exception."""
    pass


def timeout_handler(signum, frame):
    """Signal handler to raise a timeout exception."""
    raise TimeoutException()


# --- Main Logic ---
def main():
    server_process = None
    exit_code = 1  # Default to a failure exit code.

    # Register the handler for the SIGALRM signal.
    signal.signal(signal.SIGALRM, timeout_handler)

    try:
        # Step 1: Start the server process.
        print(f"[+] Starting server: {SERVER_FILE}", flush=True)
        server_process = subprocess.Popen(
            [sys.executable, SERVER_FILE],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )

        # Step 2: Wait for the server to be ready (simplified polling).
        print("[+] Waiting for server to be ready...", flush=True)
        for _ in range(15):  # Wait for a maximum of 15 seconds.
            try:
                with socket.create_connection(("127.0.0.1", SERVER_PORT), timeout=1):
                    print("[+] Server is ready.", flush=True)
                    break
            except (ConnectionRefusedError, OSError):
                time.sleep(1)
        else:  # If the loop finishes without a break.
            print("[-] Error: Server failed to start within 15 seconds.", flush=True)
            return  # The finally block will handle the exit.

        # Step 3: Verify the vulnerability.
        print(f"[+] Attempting to trigger the vulnerability (timeout: {TIMEOUT_SECONDS}s)...", flush=True)
        br = mechanize.Browser()
        br.set_handle_robots(False)
        br.add_password(SERVER_URL, "admin", "password")

        signal.alarm(TIMEOUT_SECONDS)  # Set an N-second alarm.
        try:
            br.open(SERVER_URL)
            # If the code reaches here, the operation completed before the timeout.
            signal.alarm(0)  # Cancel the alarm.
            print("[-] Result: Vulnerability not triggered (operation finished before timeout).", flush=True)
        except TimeoutException:
            # If the alarm rings, the operation was stuck, and the vulnerability is verified.
            print(f"\n[+] Result: Operation timed out after {TIMEOUT_SECONDS} seconds. Vulnerability verified.",
                  flush=True)
            exit_code = 0  # Set success exit code.
        except Exception as e:
            # Handle other potential network errors, etc.
            signal.alarm(0)  # Cancel the alarm.
            print(f"[-] An unexpected error occurred during client execution: {e}", flush=True)

    finally:
        # Step 4: Force cleanup and exit.
        print("[+] Task finished. Forcing exit...", flush=True)
        if server_process and server_process.poll() is None:
            server_process.terminate()
        os._exit(exit_code)


if __name__ == "__main__":
    # Ensure this doesn't run on Windows (signal.SIGALRM is not available).
    if os.name == 'nt':
        print("Error: This script uses signal.alarm() and is not supported on Windows.")
        sys.exit(1)
    main()
